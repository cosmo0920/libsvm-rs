#[allow(dead_code, non_camel_case_types)]

/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy)]
pub struct Struct_svm_node {
    pub index: ::libc::c_int,
    pub value: ::libc::c_double,
}
impl ::std::clone::Clone for Struct_svm_node {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_svm_node {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_svm_problem {
    pub l: ::libc::c_int,
    pub y: *mut ::libc::c_double,
    pub x: *mut *mut Struct_svm_node,
}
impl ::std::clone::Clone for Struct_svm_problem {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_svm_problem {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed1 = ::libc::c_uint;
pub const C_SVC: ::libc::c_uint = 0;
pub const NU_SVC: ::libc::c_uint = 1;
pub const ONE_CLASS: ::libc::c_uint = 2;
pub const EPSILON_SVR: ::libc::c_uint = 3;
pub const NU_SVR: ::libc::c_uint = 4;
pub type Enum_Unnamed2 = ::libc::c_uint;
pub const LINEAR: ::libc::c_uint = 0;
pub const POLY: ::libc::c_uint = 1;
pub const RBF: ::libc::c_uint = 2;
pub const SIGMOID: ::libc::c_uint = 3;
pub const PRECOMPUTED: ::libc::c_uint = 4;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_svm_parameter {
    pub svm_type: ::libc::c_int,
    pub kernel_type: ::libc::c_int,
    pub degree: ::libc::c_int,
    pub gamma: ::libc::c_double,
    pub coef0: ::libc::c_double,
    pub cache_size: ::libc::c_double,
    pub eps: ::libc::c_double,
    pub C: ::libc::c_double,
    pub nr_weight: ::libc::c_int,
    pub weight_label: *mut ::libc::c_int,
    pub weight: *mut ::libc::c_double,
    pub nu: ::libc::c_double,
    pub p: ::libc::c_double,
    pub shrinking: ::libc::c_int,
    pub probability: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_svm_parameter {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_svm_parameter {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_svm_model {
    pub param: Struct_svm_parameter,
    pub nr_class: ::libc::c_int,
    pub l: ::libc::c_int,
    pub SV: *mut *mut Struct_svm_node,
    pub sv_coef: *mut *mut ::libc::c_double,
    pub rho: *mut ::libc::c_double,
    pub probA: *mut ::libc::c_double,
    pub probB: *mut ::libc::c_double,
    pub label: *mut ::libc::c_int,
    pub nSV: *mut ::libc::c_int,
    pub free_sv: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_svm_model {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_svm_model {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut libsvm_version: ::libc::c_int;
}
extern "C" {
    pub fn svm_train(prob: *const Struct_svm_problem,
                     param: *const Struct_svm_parameter)
     -> *mut Struct_svm_model;
    pub fn svm_cross_validation(prob: *const Struct_svm_problem,
                                param: *const Struct_svm_parameter,
                                nr_fold: ::libc::c_int,
                                target: *mut ::libc::c_double) -> ();
    pub fn svm_save_model(model_file_name: *const ::libc::c_char,
                          model: *const Struct_svm_model) -> ::libc::c_int;
    pub fn svm_load_model(model_file_name: *const ::libc::c_char)
     -> *mut Struct_svm_model;
    pub fn svm_get_svm_type(model: *const Struct_svm_model) -> ::libc::c_int;
    pub fn svm_get_nr_class(model: *const Struct_svm_model) -> ::libc::c_int;
    pub fn svm_get_labels(model: *const Struct_svm_model,
                          label: *mut ::libc::c_int) -> ();
    pub fn svm_get_svr_probability(model: *const Struct_svm_model)
     -> ::libc::c_double;
    pub fn svm_predict_values(model: *const Struct_svm_model,
                              x: *const Struct_svm_node,
                              dec_values: *mut ::libc::c_double)
     -> ::libc::c_double;
    pub fn svm_predict(model: *const Struct_svm_model,
                       x: *const Struct_svm_node) -> ::libc::c_double;
    pub fn svm_predict_probability(model: *const Struct_svm_model,
                                   x: *const Struct_svm_node,
                                   prob_estimates: *mut ::libc::c_double)
     -> ::libc::c_double;
    pub fn svm_free_model_content(model_ptr: *mut Struct_svm_model) -> ();
    pub fn svm_free_and_destroy_model(model_ptr_ptr:
                                          *mut *mut Struct_svm_model) -> ();
    pub fn svm_destroy_param(param: *mut Struct_svm_parameter) -> ();
    pub fn svm_check_parameter(prob: *const Struct_svm_problem,
                               param: *const Struct_svm_parameter)
     -> *const ::libc::c_char;
    pub fn svm_check_probability_model(model: *const Struct_svm_model)
     -> ::libc::c_int;
    pub fn svm_set_print_string_function(print_func:
                                             ::std::option::Option<extern "C" fn(arg1:
                                                                                     *const ::libc::c_char)
                                                                       -> ()>)
     -> ();
}
